What is Kafka?

Kafka is a fast, scalable, durable, and fault-tolerant publish-subscribe messaging system. It is often used in real-time streaming data architectures to provide real-time analytics.

Kafka Use Cases
In short, Kafka is used for stream processing, website activity tracking, metrics collection and monitoring, log aggregation, real-time analytics, CEP, ingesting data into Spark, ingesting data into Hadoop, CQRS, replay messages, error recovery, and guaranteed distributed commit log for in-memory computing (microservices).

------------------------------------------------------------------------------------------------------

What is consistent hashing?

Consistent Hashing is a distributed hashing scheme that operates independently of the number of servers or objects in a distributed hash table by assigning them a position on an abstract circle, or hash ring. This allows servers and objects to scale without affecting the overall system.
https://www.toptal.com/big-data/consistent-hashing


------------------------------------------------------------------------------------------------------

What is a load balancer?
A load balancer is a device that distributes network or application traffic across a cluster of servers. Load balancing improves responsiveness and increases availability of applications.
https://www.citrix.com/en-in/glossary/load-balancing.html


------------------------------------------------------------------------------------------------------


What is Hadoop?
It is an open-source data platform or framework developed in Java, dedicated to store and analyze the large sets of unstructured data.


What is CDN?
Content Delivery Network.
A distributed data delivery network all around the world, holding duplicate data so that data does not have to travel large distances no matter where the end user is. It is used often for data that is in high demand, e.g. viral YouTube videos.


What is EC2 and S3?
EC2 = scalable computing
S3 = scalable storage
Both are Cloud services provided by Amazon


What are the general things we can do to reduce potential problems as systems become more complex?
 - Don't use centralized DBs
 - Use microservices
 - Use containers


What are the features of a microservice?
 - Microservices remove the database as a coupling device. The scary and counter-intuitive idea is that each service has its own database.
 - Microservices gives each team and independent ability to change what they do.
 - Lowering friction allows change to happen faster.
 - A microservice does one thing well.
 - A microservices is independently deployable. A federated architecture. Services can be deployed independently of any other service, with the constraint that they donâ€™t break their service contract.
 - A micro service is created by a small team that contains all the skills necessary to build, deploy, and manage the service. The team has end-to-end responsibility for the service.



A good tip about about microservices: Microservices usually grow successfully from monoliths. Success stories come from companies that started with monoliths because they were able to learn their domain and make good decisions about microservice partitions.
